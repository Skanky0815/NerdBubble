openapi: 3.0.0
info:
  title: NerdBubble API
  description: API for the NerdBubble backend.
  version: 1.0.0
servers:
  - url: http://0.0.0.0/api
    description: Local Docker System for Testing
paths:
  /articles:
    get:
      summary: Returns a list of Articles.
      description: Return a list of all Articles of the last 14 Days.
      responses:
        '200':
          description: A JSON array of Article data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ArticleList'
  /me:
    get:
      summary: Returns the logged in User.
      description: Return a user object from the logged in user.
      responses:
        '200':
          description: A JSON with the User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /marked-products:
    get:
      summary: Returns all marked products.
      description: Returns all marked products of the logged in user.
      responses:
        '200':
          description: A JSON array with Product data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductList'
  /products/{productId}/mark:
    post:
      parameters:
        - $ref: '#/components/parameters/UUID'
      summary: Mark an Product.
      description: Mark a product for the logged in user.
      responses:
        '204':
          description: no content
  /keywords:
    get:
      tags:
        - keywords
      summary: Returns all Keywords
      description: Return a list of all Keywords.
      responses:
        '200':
          description: A Json array with Keywords.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/KeywordList'
    post:
      tags:
        - keywords
      summary: Create a new Keyword
      description: Create a new Keyword for the current user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - word
              properties:
                word:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Keyword'

  /keywords/{keywordId}:
    delete:
      tags:
        - keywords
      parameters:
        - $ref: '#/components/parameters/UUID'
      summary: Delete the Keyword
      responses:
        '204':
          description: No content
  /providers:
    get:
      tags:
        - providers
      summary: Returns all Providers
      responses:
        '200':
          description: A Json array with Providers.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ProviderList'
    post:
      tags:
        - providers
      summary: Create a new Provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Provider'
  /providers/{providerId}:
    get:
      tags:
        - providers
      parameters:
        - $ref: '#/components/parameters/UUID'
      summary: Return on Provider by ID.
      responses:
        '200':
          description: A Json with the Provider data.
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/Provider'

components:
  parameters:
    UUID:
      name: id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
  schemas:
    UUID:
      type: string
      description: The unique entity identifier as UUIDv4
      example: 58a33e2e-543c-4dca-9c07-fd710e0238a2
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          description: The name of the user.
        email:
          type: string
          description: The email of the user.
    Product:
      type: object
      required:
        - id
        - name
        - link
        - image
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          description: The name of the product.
        link:
          type: string
          description: Link to the original product page.
        image:
          type: string
          description: The URL of a product image.
        isMarked:
          type: boolean
          description: Show if the product is marked by the logged in user.
    ProductList:
        type: array
        items:
          $ref: '#/components/schemas/Product'
    Article:
      type: object
      required:
        - id
        - title
        - subTitle
        - link
        - image
        - date
        - provider
        - description
        - products
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        title:
          type: string
          description: Title of the article.
        subTitle:
          type: string
          description: Optional sub title of the article.
        link:
          type: string
          description: Link to the original article.
        image:
          type: string
          description: The URL of a teaser image.
        date:
          type: string
          description: Article publishing date.
        provider:
          type: string
        description:
          type: string
          description: A short preview text of the article.
        products:
          type: array
          description: Products of the article.
          items:
            $ref: '#/components/schemas/Product'
    ArticleList:
      type: array
      items:
        $ref: '#/components/schemas/Article'
    Keyword:
      type: object
      required:
        - id
        - word
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        word:
          type: string
          description: The word.
    KeywordList:
      type: array
      items:
        $ref: '#/components/schemas/Keyword'
    Provider:
      type: object
      required:
        - id
        - name
        - color
        - logoImage
        - aggregateUrl
        - hasProducts
        - isActive
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          description: Name of the Provider.
        color:
          type: string
          description: The hex color of the company for the border and shadow.
          example: '#ff0000'
        logoImage:
          type: string
          description: The logo of the Provider.
        aggregateUrl:
          type: string
          description: The linkt to the page which should be crawled.
        hasProducts:
          type: boolean
          description: Should be true if the Provider has Products and not only news.
        isActive:
          type: boolean
        articleSelectorHeadline:
          type: string
          nullable: true
        articleHeadline:
          type: string
          nullable: true
        articleSelectorSubHeadline:
          type: string
          nullable: true
        articleSelectorDescription:
          type: string
          nullable: true
        articleSelectorImage:
          type: string
          nullable: true
        articleImage:
          type: string
          nullable: true
        articleSelectorLink:
          type: string
          nullable: true
        articleLink:
          type: string
          nullable: true
    ProviderList:
      type: array
      items:
        $ref: '#/components/schemas/Provider'
