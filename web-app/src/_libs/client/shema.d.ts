/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a list of Articles.
         * @description Return a list of all Articles of the last 14 Days.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A JSON array of Article data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["ArticleList"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the logged in User.
         * @description Return a user object from the logged in user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A JSON with the User data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/marked-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns all marked products.
         * @description Returns all marked products of the logged in user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A JSON array with Product data. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["ProductList"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{productId}/mark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark an Product.
         * @description Mark a product for the logged in user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["parameters"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description no content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/keywords": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns all Keywords
         * @description Return a list of all Keywords.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A Json array with Keywords. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["KeywordList"];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new Keyword
         * @description Create a new Keyword for the current user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        word: string;
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Keyword"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/keywords/{keywordId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete the Keyword */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["parameters"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all Providers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A Json array with Providers. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["ProviderList"];
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create a new Provider */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Provider"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/providers/{providerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return on Provider by ID. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: components["parameters"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A Json with the Provider data. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Provider"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description The unique entity identifier as UUIDv4
         * @example 58a33e2e-543c-4dca-9c07-fd710e0238a2
         */
        UUID: string;
        User: {
            id?: components["schemas"]["UUID"];
            /** @description The name of the user. */
            name?: string;
            /** @description The email of the user. */
            email?: string;
        };
        Product: {
            id: components["schemas"]["UUID"];
            /** @description The name of the product. */
            name: string;
            /** @description Link to the original product page. */
            link: string;
            /** @description The URL of a product image. */
            image: string;
            /** @description Show if the product is marked by the logged in user. */
            isMarked?: boolean;
        };
        ProductList: components["schemas"]["Product"][];
        Article: {
            id: components["schemas"]["UUID"];
            /** @description Title of the article. */
            title: string;
            /** @description Optional sub title of the article. */
            subTitle: string;
            /** @description Link to the original article. */
            link: string;
            /** @description The URL of a teaser image. */
            image: string;
            /** @description Article publishing date. */
            date: string;
            provider: string;
            /** @description A short preview text of the article. */
            description: string;
            /** @description Products of the article. */
            products: components["schemas"]["Product"][];
        };
        ArticleList: components["schemas"]["Article"][];
        Keyword: {
            id: components["schemas"]["UUID"];
            /** @description The word. */
            word: string;
        };
        KeywordList: components["schemas"]["Keyword"][];
        Provider: {
            id: components["schemas"]["UUID"];
            /** @description Name of the Provider. */
            name: string;
            /**
             * @description The hex color of the company for the border and shadow.
             * @example #ff0000
             */
            color: string;
            /** @description The logo of the Provider. */
            logoImage: string;
            /** @description The linkt to the page which should be crawled. */
            aggregateUrl: string;
            /** @description Should be true if the Provider has Products and not only news. */
            hasProducts: boolean;
            isActive: boolean;
            articleSelectorHeadline?: string | null;
            articleHeadline?: string | null;
            articleSelectorSubHeadline?: string | null;
            articleSelectorDescription?: string | null;
            articleSelectorImage?: string | null;
            articleImage?: string | null;
            articleSelectorLink?: string | null;
            articleLink?: string | null;
        };
        ProviderList: components["schemas"]["Provider"][];
    };
    responses: never;
    parameters: {
        UUID: components["schemas"]["UUID"];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
