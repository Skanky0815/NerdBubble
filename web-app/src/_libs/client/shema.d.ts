/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    readonly "/articles": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["articleList"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/login": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /** Attempt to authenticate a new session */
        readonly post: operations["login.store"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/logout": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /** Destroy an authenticated session */
        readonly post: operations["logout"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/user/confirm-password": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /** Confirm the user's password */
        readonly post: operations["password.confirm.store"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/user/confirmed-password-status": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** Get the password confirmation status */
        readonly get: operations["password.confirmation"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/csrf-cookie": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** Return an empty response simply to trigger the storage of the CSRF cookie in the browser */
        readonly get: operations["sanctum.csrf-cookie"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/keywords": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["keywords.index"];
        readonly put?: never;
        readonly post: operations["keywords.store"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/keywords/{id}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post?: never;
        readonly delete: operations["keywords.destroy"];
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/me": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["meAction"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/marked-products": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get: operations["productList"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/products/{productId}/mark": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        readonly post: operations["productMark"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/providers": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** Display a listing of the resource */
        readonly get: operations["providers.index"];
        readonly put?: never;
        /** Store a newly created resource in storage */
        readonly post: operations["providers.store"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/providers/{provider}": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        /** Display the specified resource */
        readonly get: operations["providers.show"];
        readonly put?: never;
        readonly post?: never;
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
    readonly "/providers/actions": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly get?: never;
        readonly put?: never;
        /** Handle the incoming request */
        readonly post: operations["providerAction"];
        readonly delete?: never;
        readonly options?: never;
        readonly head?: never;
        readonly patch?: never;
        readonly trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ArticleLayout
         * @enum {string}
         */
        readonly ArticleLayout: "IMG_RIGHT" | "IMG_FULL" | "PRODUCTS";
        /** ArticleResource */
        readonly ArticleResource: {
            readonly id: string;
            readonly title: string;
            readonly subTitle: string;
            readonly link: string;
            readonly image: string;
            readonly date: string;
            readonly provider: string;
            readonly description: string;
            readonly products: readonly components["schemas"]["ProductResource"][];
        };
        /** KeywordResource */
        readonly KeywordResource: {
            readonly id: string;
            readonly word: string;
        };
        /** ProductResource */
        readonly ProductResource: {
            readonly id: string;
            readonly name: string;
            readonly link: string;
            readonly image: string;
        };
        /** ProviderResource */
        readonly ProviderResource: {
            readonly id: string;
            readonly name: string;
            readonly color: string;
            readonly logoImage: string;
            readonly aggregateUrl: string;
            readonly hasProducts: string;
            readonly layout: string;
            readonly isActive: string;
            readonly articleSelector: {
                readonly headline: string;
                readonly subHeadline: string;
                readonly description: string;
                readonly image: string;
                readonly link: string;
                readonly wrapper: string;
                readonly dateSelector: {
                    readonly date: string;
                    readonly format: string;
                    readonly locale: string;
                    readonly attribute: string;
                };
            };
            readonly articleHeadline: string;
            readonly articleImage: string;
            readonly articleLink: string;
        };
        /** UserResource */
        readonly UserResource: {
            readonly name: string;
            readonly email: string;
        };
    };
    responses: {
        /** @description Validation error */
        readonly ValidationException: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    /** @description Errors overview. */
                    readonly message: string;
                    /** @description A detailed description of each field that failed validation. */
                    readonly errors: {
                        readonly [key: string]: readonly string[];
                    };
                };
            };
        };
        /** @description Authorization error */
        readonly AuthorizationException: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    /** @description Error overview. */
                    readonly message: string;
                };
            };
        };
        /** @description Not found */
        readonly ModelNotFoundException: {
            headers: {
                readonly [name: string]: unknown;
            };
            content: {
                readonly "application/json": {
                    /** @description Error overview. */
                    readonly message: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type ArticleLayout = components["schemas"]["ArticleLayout"];
export type ArticleResource = components["schemas"]["ArticleResource"];
export type KeywordResource = components["schemas"]["KeywordResource"];
export type ProductResource = components["schemas"]["ProductResource"];
export type ProviderResource = components["schemas"]["ProviderResource"];
export type UserResource = components["schemas"]["UserResource"];
export type ResponseValidationException =
    components["responses"]["ValidationException"];
export type ResponseAuthorizationException =
    components["responses"]["AuthorizationException"];
export type ResponseModelNotFoundException =
    components["responses"]["ModelNotFoundException"];
export type $defs = Record<string, never>;
export interface operations {
    readonly articleList: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Array of `ArticleResource` */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data: readonly components["schemas"]["ArticleResource"][];
                    };
                };
            };
        };
    };
    readonly "login.store": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly email: string;
                    readonly password: string;
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": string;
                };
            };
            readonly 422: components["responses"]["ValidationException"];
        };
    };
    readonly logout: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": Record<string, never>;
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, never>;
                };
            };
        };
    };
    readonly "password.confirm.store": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": Record<string, never>;
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": Record<string, never>;
                };
            };
        };
    };
    readonly "password.confirmation": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly confirmed: string;
                    };
                };
            };
        };
    };
    readonly "sanctum.csrf-cookie": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            readonly 204: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": string | readonly string[];
                };
            };
        };
    };
    readonly "keywords.index": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Array of `KeywordResource` */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data: readonly components["schemas"]["KeywordResource"][];
                    };
                };
            };
        };
    };
    readonly "keywords.store": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly word: string;
                };
            };
        };
        readonly responses: {
            /** @description `KeywordResource` */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data: components["schemas"]["KeywordResource"];
                    };
                };
            };
            readonly 403: components["responses"]["AuthorizationException"];
            readonly 422: components["responses"]["ValidationException"];
        };
    };
    readonly "keywords.destroy": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                readonly id: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": Record<string, never>;
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": string;
                };
            };
        };
    };
    readonly meAction: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description `UserResource` */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data: components["schemas"]["UserResource"];
                    };
                };
            };
        };
    };
    readonly productList: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Array of `ProductResource` */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data: readonly components["schemas"]["ProductResource"][];
                    };
                };
            };
        };
    };
    readonly productMark: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                readonly productId: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": Record<string, never>;
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": string;
                };
            };
        };
    };
    readonly "providers.index": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description Array of `ProviderResource` */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data: readonly components["schemas"]["ProviderResource"][];
                    };
                };
            };
        };
    };
    readonly "providers.store": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly name: string;
                    readonly color: string;
                    readonly logoImage: string;
                    readonly aggregateUrl: string;
                    readonly hasProducts: boolean;
                    readonly layout: components["schemas"]["ArticleLayout"];
                    readonly isActive: boolean;
                    readonly articleSelectorWrapper: string;
                    readonly articleSelectorHeadline?: string;
                    readonly articleHeadline?: string;
                    readonly articleSelectorSubHeadline?: string | null;
                    readonly articleSelectorDescription?: string | null;
                    readonly articleSelectorImage?: string;
                    readonly articleImage?: string;
                    readonly articleSelectorDate: string;
                    readonly articleSelectorDateLocale: string;
                    readonly articleSelectorDateFormat: string;
                    readonly articleSelectorLink?: string;
                    readonly articleLink?: string;
                    readonly productSelectorWrapper?: string;
                    readonly productSelectorName?: string;
                    readonly productSelectorImage?: string;
                    readonly productSelectorLink?: string;
                };
            };
        };
        readonly responses: {
            /** @description `ProviderResource` */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data: components["schemas"]["ProviderResource"];
                    };
                };
            };
            readonly 403: components["responses"]["AuthorizationException"];
            readonly 422: components["responses"]["ValidationException"];
        };
    };
    readonly "providers.show": {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path: {
                /** @description The provider ID */
                readonly provider: string;
            };
            readonly cookie?: never;
        };
        readonly requestBody?: never;
        readonly responses: {
            /** @description `ProviderResource` */
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": {
                        readonly data: components["schemas"]["ProviderResource"];
                    };
                };
            };
            readonly 404: components["responses"]["ModelNotFoundException"];
        };
    };
    readonly providerAction: {
        readonly parameters: {
            readonly query?: never;
            readonly header?: never;
            readonly path?: never;
            readonly cookie?: never;
        };
        readonly requestBody?: {
            readonly content: {
                readonly "application/json": {
                    readonly action: string;
                    readonly data?: {
                        readonly aggregateUrl?: string;
                        readonly articleSelector?: {
                            readonly wrapper?: string;
                            readonly headline?: string | null;
                            readonly subHeadline?: string | null;
                            readonly description?: string | null;
                            readonly image?: string | null;
                            readonly dateSelector?: {
                                readonly date?: string;
                                readonly format?: string;
                                readonly locale?: string | null;
                                readonly attribute?: string | null;
                            };
                            readonly link?: string | null;
                        };
                        readonly productSelector?: {
                            readonly wrapper?: string | null;
                            readonly name?: string | null;
                            readonly image?: string | null;
                            readonly link?: string | null;
                        };
                    };
                };
            };
        };
        readonly responses: {
            readonly 200: {
                headers: {
                    readonly [name: string]: unknown;
                };
                content: {
                    readonly "application/json": string;
                };
            };
            readonly 403: components["responses"]["AuthorizationException"];
            readonly 422: components["responses"]["ValidationException"];
        };
    };
}
